{"ast":null,"code":"var _jsxFileName = \"/Users/adwaithsreekumar/Desktop/CS/Game AI/Bot/bot-frontend/src/Connect4.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROWS = 6;\nconst COLS = 7;\nclass MCTSNode {\n  constructor(state, parent = null) {\n    this.state = state; // The state of the board\n    this.parent = parent; // Reference to parent node\n    this.children = []; // Children nodes\n    this.visits = 0; // Number of visits to this node\n    this.wins = 0; // Number of wins from this node\n  }\n  getUCB(explorationConstant = Math.sqrt(2)) {\n    if (this.visits === 0) {\n      return Infinity; // Infinite value for unvisited nodes\n    }\n    return this.wins / this.visits + explorationConstant * Math.sqrt(Math.log(this.parent.visits) / this.visits);\n  }\n}\nclass MCTS {\n  constructor(rootState) {\n    this.checkWin = state => {\n      const checkDirection = (row, col, rowStep, colStep) => {\n        let count = 0;\n        let color = state[row][col];\n        for (let i = 0; i < 4; i++) {\n          const r = row + i * rowStep;\n          const c = col + i * colStep;\n          if (r >= 0 && r < ROWS && c >= 0 && c < COLS && state[r][c] === color) {\n            count++;\n          } else {\n            break;\n          }\n        }\n        return count === 4;\n      };\n      for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS; col++) {\n          if (state[row][col] && (checkDirection(row, col, 0, 1) ||\n          // Horizontal\n          checkDirection(row, col, 1, 0) ||\n          // Vertical\n          checkDirection(row, col, 1, 1) ||\n          // Diagonal down-right\n          checkDirection(row, col, 1, -1)) // Diagonal down-left\n          ) {\n            return state[row][col];\n          }\n        }\n      }\n      return null;\n    };\n    this.rootNode = new MCTSNode(rootState);\n    this.currentPlayer = '#00008B';\n  }\n  select(node) {\n    while (node.children.length > 0) {\n      node = node.children.reduce((bestNode, child) => {\n        return child.getUCB() > bestNode.getUCB() ? child : bestNode;\n      });\n    }\n    this.expand(node);\n    return node.children[Math.floor(Math.random() * node.children.length)];\n  }\n  expand(node) {\n    const moves = this.getLegalMoves(node.state);\n    console.log(moves);\n    moves.forEach(move => {\n      const newState = this.makeMove(node.state, move);\n      const childNode = new MCTSNode(newState, node);\n      node.children.push(childNode);\n    });\n  }\n  simulate(state) {\n    while (!this.isGameOver(state)) {\n      const moves = this.getLegalMoves(state);\n      const move = moves[Math.floor(Math.random() * moves.length)];\n      state = this.makeMove(state, move);\n    }\n    return this.getOutcome(state);\n  }\n  backpropagate(node, outcome) {\n    while (node) {\n      node.visits += 1;\n      node.wins += outcome; // Update wins based on outcome\n      node = node.parent;\n    }\n  }\n  search(iterations = 1000) {\n    for (let i = 0; i < iterations; i++) {\n      let node = this.select(this.rootNode);\n      const outcome = this.simulate(node.state);\n      this.backpropagate(node, outcome);\n    }\n  }\n  getBestMove() {\n    this.search();\n    return this.rootNode.children.reduce((bestChild, child) => {\n      return child.visits > bestChild.visits ? child : bestChild;\n    }).state;\n  }\n  getLegalMoves(state) {\n    return state[0].map((e, i) => [i]);\n  }\n  makeMove(state, move) {\n    const newState = state.map(row => row.slice()); // Deep copy of state\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!newState[row][move]) {\n        newState[row][move] = this.currentPlayer === '#8B0000' ? '#8B0000' : '#00008B'; // Update to current player's color\n        break;\n      }\n    }\n    return newState;\n  }\n  isGameOver(state) {\n    // Implement logic to check if the game is over\n    return this.checkWin(state) !== null || this.getLegalMoves(state).length === 0;\n  }\n  getOutcome(state) {\n    // Implement logic to determine outcome for backpropagation\n    const winner = this.checkWin(state);\n    if (winner === '#8B0000') {\n      return -1; // Current player wins\n    } else if (winner === '#00008B') {\n      return 1; // Opponent wins\n    }\n    return 0; // Draw\n  }\n}\nexport default function Connect4() {\n  _s();\n  const [board, setBoard] = useState(Array(ROWS).fill(Array(COLS).fill(0)));\n  const [currentPlayer, setCurrentPlayer] = useState('#8B0000');\n  const [winner, setWinner] = useState(null);\n  const checkWin = board => {\n    const checkDirection = (row, col, rowStep, colStep) => {\n      let count = 0;\n      let color = board[row][col];\n      for (let i = 0; i < 4; i++) {\n        const r = row + i * rowStep;\n        const c = col + i * colStep;\n        if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === color) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      return count === 4;\n    };\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        if (board[row][col] && (checkDirection(row, col, 0, 1) ||\n        // Horizontal\n        checkDirection(row, col, 1, 0) ||\n        // Vertical\n        checkDirection(row, col, 1, 1) ||\n        // Diagonal down-right\n        checkDirection(row, col, 1, -1)) // Diagonal down-left\n        ) {\n          return board[row][col];\n        }\n      }\n    }\n    return null;\n  };\n  const handleClick = col => {\n    if (winner) return;\n    const newBoard = board.map(row => row.slice());\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!newBoard[row][col]) {\n        newBoard[row][col] = currentPlayer;\n        setBoard(newBoard);\n        const checkWinner = checkWin(newBoard);\n        if (checkWinner) {\n          setWinner(checkWinner);\n        } else {\n          setCurrentPlayer(currentPlayer === '#8B0000' ? '#00008B' : '#8B0000');\n        }\n        break;\n      }\n    }\n    let ts = new MCTS(newBoard);\n    console.log(ts.getBestMove());\n  };\n  const renderCell = (row, col) => /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => handleClick(col),\n    style: {\n      ...styles.cell,\n      backgroundColor: board[row][col] || '#5A5A5A',\n      cursor: winner ? 'default' : 'pointer'\n    }\n  }, `${row}-${col}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: styles.title,\n      children: \"Connect 4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.description,\n      children: \"Play against the AI! Make your move by dragging the pieces.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.winner,\n      children: `${winner === \"#8B0000\" ? \"Red\" : \"Blue\"} wins!`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.gameContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.boardWrapper,\n        children: Array.from({\n          length: ROWS\n        }).map((_, row) => Array.from({\n          length: COLS\n        }).map((_, col) => renderCell(row, col)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.moveHistory,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: styles.history,\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: styles.historyList,\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Move tracking not yet implemented\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setBoard(Array(ROWS).fill(Array(COLS).fill(null)));\n        setCurrentPlayer('#8B0000');\n        setWinner(null);\n      },\n      style: styles.restartButton,\n      children: \"Restart Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n}\n_s(Connect4, \"YhS3GEVvPgL2HK325M27rknzNTE=\");\n_c = Connect4;\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginTop: '50px'\n  },\n  title: {\n    fontSize: '24px',\n    fontWeight: 'bold',\n    marginBottom: '10px'\n  },\n  description: {\n    fontSize: '16px',\n    color: '#666',\n    marginBottom: '20px',\n    textAlign: 'center',\n    maxWidth: '400px'\n  },\n  gameContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '20px',\n    alignItems: 'center',\n    marginLeft: '180px'\n  },\n  boardWrapper: {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${COLS}, 50px)`,\n    gap: '5px',\n    border: '2px solid #333',\n    padding: '10px',\n    borderRadius: '8px',\n    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.3)',\n    backgroundColor: '#000000'\n  },\n  cell: {\n    width: '50px',\n    height: '50px',\n    borderRadius: '50%',\n    border: '1px solid black'\n  },\n  winner: {\n    fontSize: '18px',\n    fontWeight: 'bold',\n    color: '#d9534f',\n    marginTop: '20px',\n    marginBottom: '20px'\n  },\n  moveHistory: {\n    width: '150px',\n    height: '300px',\n    overflowY: 'scroll',\n    backgroundColor: '#e0e0e0',\n    borderRadius: '8px',\n    padding: '10px',\n    boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.2)'\n  },\n  history: {\n    fontSize: '16px',\n    fontWeight: 'bold',\n    marginBottom: '10px'\n  },\n  historyList: {\n    listStyleType: 'none',\n    paddingLeft: 0,\n    fontSize: '14px',\n    color: '#333'\n  },\n  restartButton: {\n    marginTop: '20px',\n    padding: '10px 20px',\n    fontSize: '16px',\n    fontWeight: 'bold',\n    color: '#fff',\n    backgroundColor: '#007bff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Connect4\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ROWS","COLS","MCTSNode","constructor","state","parent","children","visits","wins","getUCB","explorationConstant","Math","sqrt","Infinity","log","MCTS","rootState","checkWin","checkDirection","row","col","rowStep","colStep","count","color","i","r","c","rootNode","currentPlayer","select","node","length","reduce","bestNode","child","expand","floor","random","moves","getLegalMoves","console","forEach","move","newState","makeMove","childNode","push","simulate","isGameOver","getOutcome","backpropagate","outcome","search","iterations","getBestMove","bestChild","map","e","slice","winner","Connect4","_s","board","setBoard","Array","fill","setCurrentPlayer","setWinner","handleClick","newBoard","checkWinner","ts","renderCell","onClick","style","styles","cell","backgroundColor","cursor","fileName","_jsxFileName","lineNumber","columnNumber","container","title","description","gameContainer","boardWrapper","from","_","moveHistory","history","historyList","restartButton","_c","display","flexDirection","alignItems","marginTop","fontSize","fontWeight","marginBottom","textAlign","maxWidth","justifyContent","gap","marginLeft","gridTemplateColumns","border","padding","borderRadius","boxShadow","width","height","overflowY","listStyleType","paddingLeft","$RefreshReg$"],"sources":["/Users/adwaithsreekumar/Desktop/CS/Game AI/Bot/bot-frontend/src/Connect4.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst ROWS = 6;\nconst COLS = 7;\n\n\nclass MCTSNode {\n  constructor(state, parent = null) {\n    this.state = state; // The state of the board\n    this.parent = parent; // Reference to parent node\n    this.children = []; // Children nodes\n    this.visits = 0; // Number of visits to this node\n    this.wins = 0; // Number of wins from this node\n  }\n\n  getUCB(explorationConstant = Math.sqrt(2)) {\n    if (this.visits === 0) {\n      return Infinity; // Infinite value for unvisited nodes\n    }\n    return this.wins / this.visits + explorationConstant * Math.sqrt(Math.log(this.parent.visits) / this.visits);\n  }\n}\n\nclass MCTS {\n  constructor(rootState) {\n    this.rootNode = new MCTSNode(rootState);\n    this.currentPlayer = '#00008B'\n  }\n\n  select(node) {\n    while (node.children.length > 0) {\n      node = node.children.reduce((bestNode, child) => {\n        return child.getUCB() > bestNode.getUCB() ? child : bestNode;\n      });\n    }\n    this.expand(node)\n       return node.children[Math.floor(Math.random() * node.children.length)];\n    \n  }\n\n  expand(node) {\n    const moves = this.getLegalMoves(node.state);\n    console.log(moves)\n    moves.forEach(move => {\n      const newState = this.makeMove(node.state, move);\n      const childNode = new MCTSNode(newState, node);\n      node.children.push(childNode);\n    });\n  }\n\n  simulate(state) {\n    while (!this.isGameOver(state)) {\n      const moves = this.getLegalMoves(state);\n      const move = moves[Math.floor(Math.random() * moves.length)];\n      state = this.makeMove(state, move);\n    }\n    return this.getOutcome(state);\n  }\n\n  backpropagate(node, outcome) {\n    while (node) {\n      node.visits += 1;\n      node.wins += outcome; // Update wins based on outcome\n      node = node.parent;\n    }\n  }\n\n  search(iterations = 1000) {\n    for (let i = 0; i < iterations; i++) {\n      let node = this.select(this.rootNode);\n      const outcome = this.simulate(node.state);\n      this.backpropagate(node, outcome);\n    }\n  }\n\n  getBestMove() {\n    this.search()\n    return this.rootNode.children.reduce((bestChild, child) => {\n      return child.visits > bestChild.visits ? child : bestChild;\n    }).state;\n  }\n\n  getLegalMoves(state) {\n    return state[0].map((e, i) => [i]);\n\n  } \n\n  makeMove(state, move) {\n    const newState = state.map(row => row.slice()); // Deep copy of state\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!newState[row][move]) {\n        newState[row][move] = this.currentPlayer === '#8B0000' ? '#8B0000' : '#00008B'; // Update to current player's color\n        break;\n      }\n    }\n    return newState;\n  }\n\n  isGameOver(state) {\n    // Implement logic to check if the game is over\n    return this.checkWin(state) !== null || this.getLegalMoves(state).length === 0;\n  }\n\n  getOutcome(state) {\n    // Implement logic to determine outcome for backpropagation\n    const winner = this.checkWin(state);\n    if (winner === '#8B0000') {\n      return -1; // Current player wins\n    } else if (winner === '#00008B') {\n      return 1; // Opponent wins\n    }\n    return 0; // Draw\n  }\n\n  checkWin = (state) => {\n    const checkDirection = (row, col, rowStep, colStep) => {\n      let count = 0;\n      let color = state[row][col];\n      for (let i = 0; i < 4; i++) {\n        const r = row + i * rowStep;\n        const c = col + i * colStep;\n        if (r >= 0 && r < ROWS && c >= 0 && c < COLS && state[r][c] === color) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      return count === 4;\n    };\n\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        if (\n          state[row][col] &&\n          (checkDirection(row, col, 0, 1) || // Horizontal\n           checkDirection(row, col, 1, 0) || // Vertical\n           checkDirection(row, col, 1, 1) || // Diagonal down-right\n           checkDirection(row, col, 1, -1))  // Diagonal down-left\n        ) {\n          return state[row][col];\n        }\n      }\n    }\n    return null;\n  };\n  \n}\n\n\nexport default function Connect4 () {\n  const [board, setBoard] = useState(Array(ROWS).fill(Array(COLS).fill(0)));\n  const [currentPlayer, setCurrentPlayer] = useState('#8B0000');\n  const [winner, setWinner] = useState(null);\n\n  const checkWin = (board) => {\n    const checkDirection = (row, col, rowStep, colStep) => {\n      let count = 0;\n      let color = board[row][col];\n      for (let i = 0; i < 4; i++) {\n        const r = row + i * rowStep;\n        const c = col + i * colStep;\n        if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === color) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      return count === 4;\n    };\n\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        if (\n          board[row][col] &&\n          (checkDirection(row, col, 0, 1) || // Horizontal\n           checkDirection(row, col, 1, 0) || // Vertical\n           checkDirection(row, col, 1, 1) || // Diagonal down-right\n           checkDirection(row, col, 1, -1))  // Diagonal down-left\n        ) {\n          return board[row][col];\n        }\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (col) => {\n    if (winner) return;\n\n    const newBoard = board.map(row => row.slice());\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!newBoard[row][col]) {\n        newBoard[row][col] = currentPlayer;\n        setBoard(newBoard);\n        const checkWinner = checkWin(newBoard);\n        if (checkWinner) {\n          setWinner(checkWinner);\n        } else {\n          setCurrentPlayer(currentPlayer === '#8B0000' ? '#00008B' : '#8B0000');\n        }\n        break;\n      }\n    }\n    let ts = new MCTS(newBoard)\n    console.log(ts.getBestMove())\n  };\n\n  const renderCell = (row, col) => (\n    <div\n      key={`${row}-${col}`}\n      onClick={() => handleClick(col)}\n      style={{\n        ...styles.cell,\n        backgroundColor: board[row][col] || '#5A5A5A',\n        cursor: winner ? 'default' : 'pointer',\n      }}\n    />\n  );\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.title}>Connect 4</h1>\n      <p style={styles.description}>Play against the AI! Make your move by dragging the pieces.\n        \n      </p>\n      {winner && (\n        <div style={styles.winner}>\n         { `${winner=== \"#8B0000\" ? \"Red\" : \"Blue\"} wins!`}\n        </div>\n      )}\n      <div style={styles.gameContainer}>\n        <div style={styles.boardWrapper}>\n          {Array.from({ length: ROWS }).map((_, row) =>\n            Array.from({ length: COLS }).map((_, col) => renderCell(row, col))\n          )}\n        </div>\n        <div style={styles.moveHistory}>\n          <p style={styles.history}>Move History</p>\n          <ul style={styles.historyList}>\n            <li>Move tracking not yet implemented</li>\n          </ul>\n        </div>\n      </div>\n      <button\n        onClick={() => {\n          setBoard(Array(ROWS).fill(Array(COLS).fill(null)));\n          setCurrentPlayer('#8B0000');\n          setWinner(null);\n        }}\n        style={styles.restartButton}\n      >\n        Restart Game\n      </button>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginTop: '50px',\n  },\n  title: {\n    fontSize: '24px',\n    fontWeight: 'bold',\n    marginBottom: '10px',\n  },\n  description: {\n    fontSize: '16px',\n    color: '#666',\n    marginBottom: '20px',\n    textAlign: 'center',\n    maxWidth: '400px',\n  },\n  gameContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '20px',\n    alignItems: 'center',\n    marginLeft: '180px',\n\n  },\n  boardWrapper: {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${COLS}, 50px)`,\n    gap: '5px',\n    border: '2px solid #333',\n    padding: '10px',\n    borderRadius: '8px',\n    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.3)',\n    backgroundColor: '#000000',\n  },\n  cell: {\n    width: '50px',\n    height: '50px',\n    borderRadius: '50%',\n    border: '1px solid black',\n  },\n  winner: {\n    fontSize: '18px',\n    fontWeight: 'bold',\n    color: '#d9534f',\n    marginTop: '20px',\n    marginBottom: '20px',\n\n  },\n  moveHistory: {\n    width: '150px',\n    height: '300px',\n    overflowY: 'scroll',\n    backgroundColor: '#e0e0e0',\n    borderRadius: '8px',\n    padding: '10px',\n    boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.2)',\n  },\n  history: {\n    fontSize: '16px',\n    fontWeight: 'bold',\n    marginBottom: '10px',\n  },\n  historyList: {\n    listStyleType: 'none',\n    paddingLeft: 0,\n    fontSize: '14px',\n    color: '#333',\n  },\n  restartButton: {\n    marginTop: '20px',\n    padding: '10px 20px',\n    fontSize: '16px',\n    fontWeight: 'bold',\n    color: '#fff',\n    backgroundColor: '#007bff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer',\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}