{"ast":null,"code":"var _jsxFileName = \"/Users/adwaithsreekumar/Desktop/CS/Game AI/Bot/bot-frontend/src/Connect4.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROWS = 6;\nconst COLS = 7;\nconst Connect4 = () => {\n  _s();\n  const [board, setBoard] = useState(Array(ROWS).fill(Array(COLS).fill(null)));\n  const [currentPlayer, setCurrentPlayer] = useState('Red');\n  const [winner, setWinner] = useState(null);\n  const checkWin = board => {\n    // Check horizontal, vertical, and diagonal for a win condition\n    const checkDirection = (row, col, rowStep, colStep) => {\n      let count = 0;\n      let color = board[row][col];\n      for (let i = 0; i < 4; i++) {\n        const r = row + i * rowStep;\n        const c = col + i * colStep;\n        if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === color) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      return count === 4;\n    };\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        if (board[row][col] && (checkDirection(row, col, 0, 1) ||\n        // Horizontal\n        checkDirection(row, col, 1, 0) ||\n        // Vertical\n        checkDirection(row, col, 1, 1) ||\n        // Diagonal down-right\n        checkDirection(row, col, 1, -1)) // Diagonal down-left\n        ) {\n          return board[row][col];\n        }\n      }\n    }\n    return null;\n  };\n  const handleClick = col => {\n    if (winner) return; // Ignore clicks if there's a winner\n\n    // Find the lowest empty row in the column\n    const newBoard = board.map(row => row.slice()); // Deep copy of the board\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!newBoard[row][col]) {\n        newBoard[row][col] = currentPlayer;\n        setBoard(newBoard);\n        const checkWinner = checkWin(newBoard);\n        if (checkWinner) {\n          setWinner(checkWinner);\n        } else {\n          setCurrentPlayer(currentPlayer === 'Red' ? 'Yellow' : 'Red');\n        }\n        return;\n      }\n    }\n  };\n  const renderCell = (row, col) => /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => handleClick(col),\n    style: {\n      width: '50px',\n      height: '50px',\n      backgroundColor: board[row][col] || 'white',\n      border: '1px solid black',\n      borderRadius: '50%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      cursor: winner ? 'default' : 'pointer'\n    }\n  }, `${row}-${col}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Connect 4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), winner ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Winner: \", winner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Current Player: \", currentPlayer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 45\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${COLS}, 50px)`,\n        gap: '5px',\n        marginTop: '10px'\n      },\n      children: Array.from({\n        length: ROWS\n      }).map((_, row) => Array.from({\n        length: COLS\n      }).map((_, col) => renderCell(row, col)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setBoard(Array(ROWS).fill(Array(COLS).fill(null)));\n        setCurrentPlayer('Red');\n        setWinner(null);\n      },\n      style: {\n        marginTop: '20px',\n        padding: '10px 20px'\n      },\n      children: \"Restart Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Connect4, \"WGfcidZ+Xne2OC9fv57c+zKU6jI=\");\n_c = Connect4;\nexport default Connect4;\nvar _c;\n$RefreshReg$(_c, \"Connect4\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ROWS","COLS","Connect4","_s","board","setBoard","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","checkWin","checkDirection","row","col","rowStep","colStep","count","color","i","r","c","handleClick","newBoard","map","slice","checkWinner","renderCell","onClick","style","width","height","backgroundColor","border","borderRadius","display","alignItems","justifyContent","cursor","fileName","_jsxFileName","lineNumber","columnNumber","flexDirection","children","gridTemplateColumns","gap","marginTop","from","length","_","padding","_c","$RefreshReg$"],"sources":["/Users/adwaithsreekumar/Desktop/CS/Game AI/Bot/bot-frontend/src/Connect4.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst ROWS = 6;\nconst COLS = 7;\n\nconst Connect4 = () => {\n  const [board, setBoard] = useState(Array(ROWS).fill(Array(COLS).fill(null)));\n  const [currentPlayer, setCurrentPlayer] = useState('Red');\n  const [winner, setWinner] = useState(null);\n\n  const checkWin = (board) => {\n    // Check horizontal, vertical, and diagonal for a win condition\n    const checkDirection = (row, col, rowStep, colStep) => {\n      let count = 0;\n      let color = board[row][col];\n      for (let i = 0; i < 4; i++) {\n        const r = row + i * rowStep;\n        const c = col + i * colStep;\n        if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === color) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      return count === 4;\n    };\n\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        if (\n          board[row][col] &&\n          (checkDirection(row, col, 0, 1) || // Horizontal\n           checkDirection(row, col, 1, 0) || // Vertical\n           checkDirection(row, col, 1, 1) || // Diagonal down-right\n           checkDirection(row, col, 1, -1))  // Diagonal down-left\n        ) {\n          return board[row][col];\n        }\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (col) => {\n    if (winner) return; // Ignore clicks if there's a winner\n\n    // Find the lowest empty row in the column\n    const newBoard = board.map(row => row.slice()); // Deep copy of the board\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!newBoard[row][col]) {\n        newBoard[row][col] = currentPlayer;\n        setBoard(newBoard);\n        const checkWinner = checkWin(newBoard);\n        if (checkWinner) {\n          setWinner(checkWinner);\n        } else {\n          setCurrentPlayer(currentPlayer === 'Red' ? 'Yellow' : 'Red');\n        }\n        return;\n      }\n    }\n  };\n\n  const renderCell = (row, col) => (\n    <div\n      key={`${row}-${col}`}\n      onClick={() => handleClick(col)}\n      style={{\n        width: '50px',\n        height: '50px',\n        backgroundColor: board[row][col] || 'white',\n        border: '1px solid black',\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: winner ? 'default' : 'pointer',\n      }}\n    />\n  );\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <h2>Connect 4</h2>\n      {winner ? <h3>Winner: {winner}</h3> : <h3>Current Player: {currentPlayer}</h3>}\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${COLS}, 50px)`,\n        gap: '5px',\n        marginTop: '10px',\n      }}>\n        {Array.from({ length: ROWS }).map((_, row) =>\n          Array.from({ length: COLS }).map((_, col) => renderCell(row, col))\n        )}\n      </div>\n      <button\n        onClick={() => {\n          setBoard(Array(ROWS).fill(Array(COLS).fill(null)));\n          setCurrentPlayer('Red');\n          setWinner(null);\n        }}\n        style={{ marginTop: '20px', padding: '10px 20px' }}\n      >\n        Restart Game\n      </button>\n    </div>\n  );\n};\n\nexport default Connect4;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}