{"ast":null,"code":"var _jsxFileName = \"/Users/adwaithsreekumar/Desktop/CS/Game AI/Bot/bot-frontend/src/ChessB.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Chess } from \"chess.js\";\nimport { Chessboard } from \"react-chessboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const [game, setGame] = useState(new Chess());\n  const [pos] = useState([game.fen()]);\n  const makeMove = move => {\n    game.move(move);\n    pos.push(game.fen());\n    setGame(new Chess(game.fen()));\n  };\n  function makeRandomMove(possibleMoves) {\n    if (game.isGameOver() || game.isDraw() || possibleMoves.length === 0) return; // exit if the game is over\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length);\n    makeMove(possibleMoves[randomIndex]);\n  }\n  function selectMove() {\n    let [a, move] = minimax(true, -99999999, 99999999, 3);\n    makeMove(move);\n  }\n  function minimax(blackPlaying, alpha, beta, depth) {\n    const possibleMoves = game.moves();\n    if (depth === 0 || game.isCheckmate()) {\n      // console.log(game.board(), evalBoard(game.board()))\n      return [evalBoard(game.board()), 0];\n    }\n    if (blackPlaying) {\n      let score = -99999999;\n      let bestMove = 0;\n      for (const move of possibleMoves) {\n        game.move(move);\n        let [curScore, a] = minimax(false, alpha, beta, depth - 1);\n        game.undo();\n        alpha = Math.max(alpha, curScore);\n        if (beta <= alpha) break;\n        if (curScore > score) {\n          score = curScore;\n          bestMove = move;\n        }\n      }\n      if (bestMove != 0) {\n        game.move(bestMove);\n        console.log(bestMove, blackPlaying, score, game.fen(), game.board());\n        game.undo();\n      }\n      return [score, bestMove];\n    } else {\n      let score = 99999999;\n      let bestMove = 0;\n      for (const move of possibleMoves) {\n        game.move(move);\n        let [curScore, b] = minimax(true, alpha, beta, depth - 1);\n        game.undo();\n        beta = Math.min(beta, curScore);\n        if (beta <= alpha) break;\n        if (curScore < score) {\n          score = curScore;\n          bestMove = move;\n        }\n      }\n      console.log(bestMove, blackPlaying, score, game.fen(), game.board());\n      return [score, bestMove];\n    }\n  }\n  var reverseArray = function (array) {\n    return array.slice().reverse();\n  };\n  function evalBoard(board) {\n    var pawnEvalWhite = [[9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0], [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0], [1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0], [0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5], [0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0], [0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5], [0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]];\n    var pawnEvalBlack = reverseArray(pawnEvalWhite);\n    console.log(pawnEvalBlack);\n    var knightEvalWhite = [[-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0], [-4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0], [-3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0], [-3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0], [-3.0, 0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0], [-3.0, 0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0], [-4.0, -2.0, 0.0, 0.5, 0.5, 0.0, -2.0, -4.0], [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]];\n    var knightEvalBlack = reverseArray(knightEvalWhite);\n    var bishopEvalWhite = [[-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0], [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0], [-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0], [-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0], [-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0], [-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0], [-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0], [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]];\n    var bishopEvalBlack = reverseArray(bishopEvalWhite);\n    var rookEvalWhite = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5], [0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0]];\n    var rookEvalBlack = reverseArray(rookEvalWhite);\n    var evalQueen = [[-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0], [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0], [-1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0], [-0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5], [0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5], [-1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0], [-1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0], [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]];\n    var kingEvalWhite = [[-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0], [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0], [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0], [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0], [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0], [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0], [2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0], [2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0]];\n    var kingEvalBlack = reverseArray(kingEvalWhite);\n    var score = 0;\n    const side = -1;\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        if (board[i][j]) {\n          switch (board[i][j].type) {\n            case \"r\":\n              if (board[i][j].color == \"w\") score += 50 * rookEvalWhite[i][j] * side;else score += rookEvalBlack[i][j] * -side;\n              break;\n            case \"b\":\n              if (board[i][j].color == \"w\") score += 30 * bishopEvalWhite[i][j] * side;else score += bishopEvalBlack[i][j] * -side;\n              break;\n            case \"n\":\n              if (board[i][j].color == \"w\") score += 30 * knightEvalWhite[i][j] * side;else score += knightEvalBlack[i][j] * -side;\n              break;\n            case \"p\":\n              if (board[i][j].color == \"w\") score += 10 * pawnEvalWhite[i][j] * side;else score += pawnEvalBlack[i][j] * -side;\n              break;\n            case \"k\":\n              if (board[i][j].color == \"w\") score += 900 * kingEvalWhite[i][j] * side;else score += kingEvalBlack[i][j] * -side;\n              break;\n            case \"q\":\n              if (board[i][j].color == \"w\") score += 100 * evalQueen[i][j] * side;else score += evalQueen[i][j] * -side;\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    }\n    return score;\n  }\n  function onDrop(sourceSquare, targetSquare) {\n    try {\n      makeMove({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\" // always promote to a queen for example simplicity\n      });\n\n      // illegal move\n      setTimeout(selectMove, 200);\n      return true;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: game.fen(),\n      onPieceDrop: onDrop,\n      autoPromoteToQueen: true,\n      boardWidth: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 6\n  }, this);\n}\n_s(Board, \"ERF0jez/SgXmnsbkRnflvQOycdw=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","Chess","Chessboard","jsxDEV","_jsxDEV","Board","_s","game","setGame","pos","fen","makeMove","move","push","makeRandomMove","possibleMoves","isGameOver","isDraw","length","randomIndex","Math","floor","random","selectMove","a","minimax","blackPlaying","alpha","beta","depth","moves","isCheckmate","evalBoard","board","score","bestMove","curScore","undo","max","console","log","b","min","reverseArray","array","slice","reverse","pawnEvalWhite","pawnEvalBlack","knightEvalWhite","knightEvalBlack","bishopEvalWhite","bishopEvalBlack","rookEvalWhite","rookEvalBlack","evalQueen","kingEvalWhite","kingEvalBlack","side","i","j","type","color","onDrop","sourceSquare","targetSquare","from","to","promotion","setTimeout","e","children","position","onPieceDrop","autoPromoteToQueen","boardWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adwaithsreekumar/Desktop/CS/Game AI/Bot/bot-frontend/src/ChessB.js"],"sourcesContent":["import { useState } from \"react\";\nimport { Chess } from \"chess.js\";\nimport { Chessboard } from \"react-chessboard\";\n\nexport default function Board() {\n  const [game, setGame] = useState(new Chess());\n  const [pos, ] = useState([game.fen()]);\n\n  const makeMove = (move) => {\n\n    game.move(move)\n    pos.push(game.fen())\n    setGame(new Chess(game.fen()))\n  }\n\n  function makeRandomMove(possibleMoves) {\n    \n    if (game.isGameOver() || game.isDraw() || possibleMoves.length === 0) return; // exit if the game is over\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length);\n    makeMove(possibleMoves[randomIndex]);\n  }\n\n  function selectMove(){\n    let [a, move] = minimax(true, -99999999, 99999999, 3)\n    makeMove(move)\n   }\n\n\n\n  function minimax(blackPlaying, alpha, beta, depth) {\n    const possibleMoves = game.moves();\n    if (depth === 0 || game.isCheckmate()) {\n      // console.log(game.board(), evalBoard(game.board()))\n      return [evalBoard(game.board()), 0]\n    } \n    \n    if (blackPlaying){\n      let score = -99999999;\n      let bestMove = 0\n      for (const move of possibleMoves){\n        game.move(move)\n        let [curScore, a] = minimax(false, alpha, beta, depth-1);\n        game.undo()\n        alpha = Math.max(alpha, curScore);\n        if (beta <= alpha) break\n        if (curScore > score) {score = curScore; bestMove = move}\n\n      }\n      if (bestMove != 0){\n      game.move(bestMove)\n      console.log(bestMove, blackPlaying, score, game.fen(), game.board())\n      game.undo()\n    }\n\n      return [score, bestMove]\n    }\n    else {\n      let score = 99999999;\n      let bestMove = 0\n\n      for (const move of possibleMoves){\n        game.move(move)\n        let [curScore, b] = minimax(true, alpha, beta, depth-1);\n        game.undo()\n        beta = Math.min(beta, curScore);\n        if (beta <= alpha) break\n        if (curScore < score) {score = curScore; bestMove = move}\n      }\n      console.log(bestMove, blackPlaying, score, game.fen(), game.board())\n      return [score, bestMove]\n    }\n\n  }\n\n  var reverseArray = function(array) {\n    return array.slice().reverse();\n  };\n\n  function evalBoard(board) {\n    \n\n\nvar pawnEvalWhite =\n  [\n      [9.0,  9.0,  9.0,  9.0,  9.0,  9.0,  9.0,  9.0],\n      [5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0],\n      [1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0],\n      [0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5],\n      [0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0],\n      [0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5],\n      [0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5],\n      [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0]\n  ];\n\nvar pawnEvalBlack = reverseArray(pawnEvalWhite);\nconsole.log(pawnEvalBlack)\nvar knightEvalWhite =\n  [\n      [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\n      [-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0],\n      [-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0],\n      [-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0],\n      [-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0],\n      [-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0],\n      [-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0],\n      [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]\n  ];\n\nvar knightEvalBlack = reverseArray(knightEvalWhite);\n\nvar bishopEvalWhite = [\n  [ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\n  [ -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],\n  [ -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0],\n  [ -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0],\n  [ -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0],\n  [ -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0],\n  [ -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0],\n  [ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]\n];\n\nvar bishopEvalBlack = reverseArray(bishopEvalWhite);\n\nvar rookEvalWhite = [\n  [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],\n  [  0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5],\n  [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n  [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n  [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n  [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n  [ -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5],\n  [  0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0]\n];\n\nvar rookEvalBlack = reverseArray(rookEvalWhite);\n\nvar evalQueen =\n  [\n  [ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\n  [ -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],\n  [ -1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],\n  [ -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],\n  [  0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5],\n  [ -1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0],\n  [ -1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0],\n  [ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]\n];\n\nvar kingEvalWhite = [\n\n  [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n  [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n  [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n  [ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n  [ -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],\n  [ -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],\n  [  2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0 ],\n  [  2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0 ]\n];\n\nvar kingEvalBlack = reverseArray(kingEvalWhite);\n\n\n  \n\n    var score = 0;\n    const side = -1;\n    for (let i = 0; i < 8; i++){\n      for (let j = 0; j < 8; j++){\n        if (board[i][j]){\n          switch(board[i][j].type){\n            case \"r\":\n              if (board[i][j].color == \"w\") score += 50*rookEvalWhite[i][j] * side\n              else score += rookEvalBlack[i][j] * -side\n              break;\n            case \"b\":\n              if (board[i][j].color == \"w\") score += 30*bishopEvalWhite[i][j] * side\n              else score += bishopEvalBlack[i][j] * -side\n              break;\n            case \"n\":\n              if (board[i][j].color == \"w\") score += 30*knightEvalWhite[i][j] * side\n              else score += knightEvalBlack[i][j] * -side\n              break;\n            case \"p\":\n              if (board[i][j].color == \"w\") score += 10*pawnEvalWhite[i][j] * side\n              else score += pawnEvalBlack[i][j] * -side\n              break;\n            case \"k\":\n                if (board[i][j].color == \"w\") score += 900*kingEvalWhite[i][j] * side\n                else score += kingEvalBlack[i][j] * -side\n                break;\n            case \"q\":\n              if (board[i][j].color == \"w\") score += 100*evalQueen[i][j] * side\n              else score += evalQueen[i][j] * -side\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    }\n    return score;\n\n   }\n\n\n\n  function onDrop(sourceSquare, targetSquare) {\n    try{\n      makeMove({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\", // always promote to a queen for example simplicity\n      });\n\n      // illegal move\n      setTimeout(selectMove, 200);\n      return true;\n    }\n    catch (e) { console.log(e)}\n  }\n\n\n  return(\n     <div>\n        <Chessboard position={game.fen()} onPieceDrop={onDrop} autoPromoteToQueen={true} boardWidth={400}/>\n     </div>\n  )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}