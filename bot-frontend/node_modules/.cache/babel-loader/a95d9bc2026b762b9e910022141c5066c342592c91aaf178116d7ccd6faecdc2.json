{"ast":null,"code":"var _jsxFileName = \"/Users/adwaithsreekumar/Desktop/CS/Game AI/Bot/bot-frontend/src/Connect4.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROWS = 6;\nconst COLS = 7;\nclass MCTSNode {\n  constructor(state, parent = null, move = null) {\n    this.state = state; // The state of the board\n    this.parent = parent; // Reference to parent node\n    this.children = []; // Children nodes\n    this.visits = 0; // Number of visits to this node\n    this.wins = 0; // Number of wins from this node\n    this.move = move;\n  }\n  getUCB(explorationConstant = Math.sqrt(2)) {\n    if (this.visits === 0) {\n      return Infinity; // Infinite value for unvisited nodes\n    }\n    return this.wins / this.visits + explorationConstant * Math.sqrt(Math.log(this.parent.visits) / this.visits);\n  }\n}\nclass MCTS {\n  constructor(rootState) {\n    this.checkWin = state => {\n      const checkDirection = (row, col, rowStep, colStep) => {\n        let count = 0;\n        let color = state[row][col];\n        for (let i = 0; i < 4; i++) {\n          const r = row + i * rowStep;\n          const c = col + i * colStep;\n          if (r >= 0 && r < ROWS && c >= 0 && c < COLS && state[r][c] === color) {\n            count++;\n          } else {\n            break;\n          }\n        }\n        return count === 4;\n      };\n      for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS; col++) {\n          if (state[row][col] && (checkDirection(row, col, 0, 1) ||\n          // Horizontal\n          checkDirection(row, col, 1, 0) ||\n          // Vertical\n          checkDirection(row, col, 1, 1) ||\n          // Diagonal down-right\n          checkDirection(row, col, 1, -1)) // Diagonal down-left\n          ) {\n            return state[row][col];\n          }\n        }\n      }\n      return null;\n    };\n    this.rootNode = new MCTSNode(rootState);\n    this.currentPlayer = '#00008B';\n  }\n  select(node) {\n    if (node.children.length > 0) {\n      node = node.children.reduce((bestNode, child) => {\n        return child.getUCB() > bestNode.getUCB() ? child : bestNode;\n      });\n      return node;\n    }\n    this.expand(node);\n    return node.children[Math.floor(Math.random() * node.children.length)];\n  }\n  expand(node) {\n    const moves = this.getLegalMoves(node.state);\n    moves.forEach(move => {\n      const childNode = this.makeMove(node, move);\n      node.children.push(childNode);\n    });\n  }\n  simulate(node) {\n    let a = this.getLegalMoves(node.state);\n    while (!this.isGameOver(node.state) && a.length !== 0) {\n      this.newPlayer();\n      const moves = a;\n      const move = moves[Math.floor(Math.random() * moves.length)];\n      node = this.makeMove(node, move);\n      a = this.getLegalMoves(node.state);\n    }\n    return this.getOutcome(node.state);\n  }\n  backpropagate(node, outcome) {\n    while (node) {\n      node.visits += 1;\n      node.wins += outcome; // Update wins based on outcome\n      node = node.parent;\n    }\n  }\n  search() {\n    let startTime = Date.now();\n    let endTime = startTime + 5000;\n    while (Date.now() < endTime) {\n      let node = this.select(this.rootNode);\n      const outcome = this.simulate(node);\n      this.backpropagate(node, outcome);\n    }\n  }\n  getBestMove() {\n    this.search();\n    return this.rootNode.children.reduce((bestChild, child) => {\n      return child.visits > bestChild.visits ? child : bestChild;\n    }).move;\n  }\n  getLegalMoves(state) {\n    return state[0].map((e, i) => i).filter(x => state[0][x] === 0);\n  }\n  makeMove(node, move) {\n    const newState = node.state.map(row => row.slice()); // Deep copy of state\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!newState[row][move]) {\n        newState[row][move] = this.currentPlayer === '#8B0000' ? '#8B0000' : '#00008B'; // Update to current player's color\n        break;\n      }\n    }\n    return new MCTSNode(newState, node, move);\n    ;\n  }\n  isGameOver(state) {\n    // Implement logic to check if the game is over\n    return this.checkWin(state) !== null || this.getLegalMoves(state).length === 0;\n  }\n  newPlayer() {\n    this.currentPlayer = this.currentPlayer === '#8B0000' ? '#00008B' : '#8B0000';\n  }\n  getOutcome(state) {\n    // Implement logic to determine outcome for backpropagation\n    const winner = this.checkWin(state);\n    if (winner === '#8B0000') {\n      return -1; // Current player wins\n    } else if (winner === '#00008B') {\n      return 1; // Opponent wins\n    }\n    return 0; // Draw\n  }\n}\nexport default function Connect4() {\n  _s();\n  const [board, setBoard] = useState(Array(ROWS).fill(Array(COLS).fill(0)));\n  const [winner, setWinner] = useState(null);\n  const [crClick, setCrClick] = useState(null);\n  const checkWin = board => {\n    const checkDirection = (row, col, rowStep, colStep) => {\n      let count = 0;\n      let color = board[row][col];\n      for (let i = 0; i < 4; i++) {\n        const r = row + i * rowStep;\n        const c = col + i * colStep;\n        if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === color) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      return count === 4;\n    };\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        if (board[row][col] && (checkDirection(row, col, 0, 1) ||\n        // Horizontal\n        checkDirection(row, col, 1, 0) ||\n        // Vertical\n        checkDirection(row, col, 1, 1) ||\n        // Diagonal down-right\n        checkDirection(row, col, 1, -1)) // Diagonal down-left\n        ) {\n          return board[row][col];\n        }\n      }\n    }\n    return null;\n  };\n  const handleClick = col => {\n    if (winner) return;\n    if (crClick) return;\n    setCrClick(true);\n    let newBoard = board.map(row => row.slice());\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!newBoard[row][col]) {\n        newBoard[row][col] = \"#8B0000\";\n        setBoard(newBoard);\n        const checkWinner = checkWin(newBoard);\n        if (checkWinner) {\n          setWinner(checkWinner);\n        }\n        break;\n      }\n    }\n    setTimeout(() => {\n      let ts = new MCTS(newBoard);\n      let nCol = ts.getBestMove();\n      if (winner) return;\n      newBoard = newBoard.map(row => row.slice());\n      for (let row = ROWS - 1; row >= 0; row--) {\n        if (!newBoard[row][nCol]) {\n          newBoard[row][nCol] = \"#00008B\";\n          setBoard(newBoard);\n          const checkWinner = checkWin(newBoard);\n          if (checkWinner) {\n            setWinner(checkWinner);\n          }\n          break;\n        }\n      }\n      setCrClick(null);\n    }, 200);\n  };\n  const renderCell = (row, col) => /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => handleClick(col),\n    style: {\n      ...styles.cell,\n      backgroundColor: board[row][col] || '#5A5A5A',\n      cursor: winner ? 'default' : 'pointer'\n    }\n  }, `${row}-${col}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: styles.title,\n      children: \"Connect 4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.description,\n      children: \"Play against the AI! Make your move by dragging the pieces.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), console.log(winner, \"HI\"), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.winner,\n      children: `${winner === \"#8B0000\" ? \"Red\" : \"Blue\"} wins!`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.gameContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.boardWrapper,\n        children: Array.from({\n          length: ROWS\n        }).map((_, row) => Array.from({\n          length: COLS\n        }).map((_, col) => renderCell(row, col)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), crClick && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: 1000,\n        backgroundColor: 'rgba(0, 0, 0, 0.05)' // Semi-transparent overlay\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n}\n_s(Connect4, \"epuqcp6rHSgEj8pPr0bKWmp1ypM=\");\n_c = Connect4;\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginTop: '50px'\n  },\n  title: {\n    fontSize: '24px',\n    fontWeight: 'bold',\n    marginBottom: '10px'\n  },\n  description: {\n    fontSize: '16px',\n    color: '#666',\n    marginBottom: '20px',\n    textAlign: 'center',\n    maxWidth: '400px'\n  },\n  gameContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '20px',\n    alignItems: 'center'\n  },\n  boardWrapper: {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${COLS}, 50px)`,\n    gap: '5px',\n    border: '2px solid #333',\n    padding: '10px',\n    borderRadius: '8px',\n    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.3)',\n    backgroundColor: '#000000'\n  },\n  cell: {\n    width: '50px',\n    height: '50px',\n    borderRadius: '50%',\n    border: '1px solid black'\n  },\n  winner: {\n    fontSize: '18px',\n    fontWeight: 'bold',\n    color: '#d9534f',\n    marginTop: '20px',\n    marginBottom: '20px'\n  },\n  restartButton: {\n    marginTop: '20px',\n    padding: '10px 20px',\n    fontSize: '16px',\n    fontWeight: 'bold',\n    color: '#fff',\n    backgroundColor: '#007bff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Connect4\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ROWS","COLS","MCTSNode","constructor","state","parent","move","children","visits","wins","getUCB","explorationConstant","Math","sqrt","Infinity","log","MCTS","rootState","checkWin","checkDirection","row","col","rowStep","colStep","count","color","i","r","c","rootNode","currentPlayer","select","node","length","reduce","bestNode","child","expand","floor","random","moves","getLegalMoves","forEach","childNode","makeMove","push","simulate","a","isGameOver","newPlayer","getOutcome","backpropagate","outcome","search","startTime","Date","now","endTime","getBestMove","bestChild","map","e","filter","x","newState","slice","winner","Connect4","_s","board","setBoard","Array","fill","setWinner","crClick","setCrClick","handleClick","newBoard","checkWinner","setTimeout","ts","nCol","renderCell","onClick","style","styles","cell","backgroundColor","cursor","fileName","_jsxFileName","lineNumber","columnNumber","container","title","description","console","gameContainer","boardWrapper","from","_","position","top","left","width","height","zIndex","_c","display","flexDirection","alignItems","marginTop","fontSize","fontWeight","marginBottom","textAlign","maxWidth","justifyContent","gap","gridTemplateColumns","border","padding","borderRadius","boxShadow","restartButton","$RefreshReg$"],"sources":["/Users/adwaithsreekumar/Desktop/CS/Game AI/Bot/bot-frontend/src/Connect4.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst ROWS = 6;\nconst COLS = 7;\n\n\nclass MCTSNode {\n  constructor(state, parent = null, move = null) {\n    this.state = state; // The state of the board\n    this.parent = parent; // Reference to parent node\n    this.children = []; // Children nodes\n    this.visits = 0; // Number of visits to this node\n    this.wins = 0; // Number of wins from this node\n    this.move = move;\n  }\n\n  getUCB(explorationConstant = Math.sqrt(2)) {\n    if (this.visits === 0) {\n      return Infinity; // Infinite value for unvisited nodes\n    }\n    return this.wins / this.visits + explorationConstant * Math.sqrt(Math.log(this.parent.visits) / this.visits);\n  }\n}\n\nclass MCTS {\n  constructor(rootState) {\n    this.rootNode = new MCTSNode(rootState);\n    this.currentPlayer = '#00008B'\n  }\n\n  select(node) {\n    if (node.children.length > 0) {\n      node = node.children.reduce((bestNode, child) => {\n        return child.getUCB() > bestNode.getUCB() ? child : bestNode;\n      });\n      return node\n    }\n    this.expand(node)\n    return node.children[Math.floor(Math.random() * node.children.length)];\n    \n  }\n\n  expand(node) {\n    const moves = this.getLegalMoves(node.state);\n    moves.forEach(move => {\n      const childNode = this.makeMove(node, move);\n      node.children.push(childNode);\n    });\n  }\n\n  simulate(node) {\n    let a = this.getLegalMoves(node.state)\n    while (!this.isGameOver(node.state) && a.length !== 0) {\n      this.newPlayer();\n      const moves = a;\n      const move = moves[Math.floor(Math.random() * moves.length)];\n      node = this.makeMove(node, move);\n      a = this.getLegalMoves(node.state)\n    }\n    return this.getOutcome(node.state);\n  }\n\n  backpropagate(node, outcome) {\n    while (node) {\n      node.visits += 1;\n      node.wins += outcome; // Update wins based on outcome\n      node = node.parent;\n    }\n  }\n\n  search() {\n    let startTime = Date.now();\n    let endTime = startTime + 5000;\n\n    while (Date.now() < endTime) {\n        let node = this.select(this.rootNode);\n        const outcome = this.simulate(node);\n        this.backpropagate(node, outcome);\n    }\n    \n  }\n\n  getBestMove() {\n    this.search()\n    return this.rootNode.children.reduce((bestChild, child) => {\n      return child.visits > bestChild.visits ? child : bestChild;\n    }).move;\n  }\n\n  getLegalMoves(state) {\n    return state[0].map((e, i) => i).filter((x) => state[0][x] === 0);\n  } \n\n  makeMove(node, move) {\n    const newState = node.state.map(row => row.slice()); // Deep copy of state\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!newState[row][move]) {\n        newState[row][move] = this.currentPlayer === '#8B0000' ? '#8B0000' : '#00008B'; // Update to current player's color\n        break;\n      }\n    }\n    return new MCTSNode(newState, node, move);;\n  }\n\n  isGameOver(state) {\n    // Implement logic to check if the game is over\n    return this.checkWin(state) !== null || this.getLegalMoves(state).length === 0;\n  }\n\n  newPlayer(){\n    this.currentPlayer = this.currentPlayer === '#8B0000' ? '#00008B' : '#8B0000'\n  }\n\n  getOutcome(state) {\n    // Implement logic to determine outcome for backpropagation\n    const winner = this.checkWin(state);\n    if (winner === '#8B0000') {\n      return -1; // Current player wins\n    } else if (winner === '#00008B') {\n      return 1; // Opponent wins\n    }\n    return 0; // Draw\n  }\n\n  checkWin = (state) => {\n    const checkDirection = (row, col, rowStep, colStep) => {\n      let count = 0;\n      let color = state[row][col];\n      for (let i = 0; i < 4; i++) {\n        const r = row + i * rowStep;\n        const c = col + i * colStep;\n        if (r >= 0 && r < ROWS && c >= 0 && c < COLS && state[r][c] === color) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      return count === 4;\n    };\n\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        if (\n          state[row][col] &&\n          (checkDirection(row, col, 0, 1) || // Horizontal\n           checkDirection(row, col, 1, 0) || // Vertical\n           checkDirection(row, col, 1, 1) || // Diagonal down-right\n           checkDirection(row, col, 1, -1))  // Diagonal down-left\n        ) {\n          return state[row][col];\n        }\n      }\n    }\n    return null;\n  };\n  \n}\n\n\nexport default function Connect4 () {\n  const [board, setBoard] = useState(Array(ROWS).fill(Array(COLS).fill(0)));\n  const [winner, setWinner] = useState(null);\n  const [crClick, setCrClick] = useState(null);\n\n  const checkWin = (board) => {\n    const checkDirection = (row, col, rowStep, colStep) => {\n      let count = 0;\n      let color = board[row][col];\n      for (let i = 0; i < 4; i++) {\n        const r = row + i * rowStep;\n        const c = col + i * colStep;\n        if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === color) {\n          count++;\n        } else {\n          break;\n        }\n      }\n      return count === 4;\n    };\n\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        if (\n          board[row][col] &&\n          (checkDirection(row, col, 0, 1) || // Horizontal\n           checkDirection(row, col, 1, 0) || // Vertical\n           checkDirection(row, col, 1, 1) || // Diagonal down-right\n           checkDirection(row, col, 1, -1))  // Diagonal down-left\n        ) {\n          return board[row][col];\n        }\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (col) => {\n    if (winner) return;\n    if (crClick) return;\n\n    setCrClick(true)\n\n    let newBoard = board.map(row => row.slice());\n    for (let row = ROWS - 1; row >= 0; row--) {\n    if (!newBoard[row][col]) {\n        newBoard[row][col] = \"#8B0000\";\n        setBoard(newBoard);\n        const checkWinner = checkWin(newBoard);\n        if (checkWinner) {\n        setWinner(checkWinner);\n        } \n        break;\n    }\n    }\n    setTimeout(() => {\n        let ts = new MCTS(newBoard)\n        let nCol = ts.getBestMove()\n    \n        if (winner) return;\n    \n        newBoard = newBoard.map(row => row.slice());\n        for (let row = ROWS - 1; row >= 0; row--) {\n            if (!newBoard[row][nCol]) {\n            newBoard[row][nCol] = \"#00008B\";\n            setBoard(newBoard);\n            const checkWinner = checkWin(newBoard);\n            if (checkWinner) {\n                setWinner(checkWinner);\n            } \n            break;\n            }\n        }\n\n        setCrClick(null)\n\n            \n    }, 200)\n\n\n    }\n  \n\n  const renderCell = (row, col) =>  \n    (\n        <div\n        key={`${row}-${col}`}\n        onClick={() => handleClick(col)}\n        style={{\n            ...styles.cell,\n            backgroundColor: board[row][col] || '#5A5A5A',\n            cursor: winner ? 'default' : 'pointer',\n        }}\n        />\n    )\n   \n    \n\n   \n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.title}>Connect 4</h1>\n      <p style={styles.description}>Play against the AI! Make your move by dragging the pieces.\n        \n      </p>\n      {console.log(winner, \"HI\")}\n      {winner && (\n        <div style={styles.winner}>\n         { `${winner=== \"#8B0000\" ? \"Red\" : \"Blue\"} wins!`}\n        </div>\n      )}\n      <div style={styles.gameContainer}>\n        <div style={styles.boardWrapper}>\n          {Array.from({ length: ROWS }).map((_, row) =>\n            Array.from({ length: COLS }).map((_, col) => renderCell(row, col))\n          )}\n        </div>\n      </div>\n    \n\n      {crClick && (\n        <div \n          style={{\n            position: 'fixed', \n            top: 0, \n            left: 0, \n            width: '100%', \n            height: '100%', \n            zIndex: 1000, \n            backgroundColor: 'rgba(0, 0, 0, 0.05)' // Semi-transparent overlay\n          }} \n        />\n      )}\n    </div>\n    \n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginTop: '50px',\n  },\n  title: {\n    fontSize: '24px',\n    fontWeight: 'bold',\n    marginBottom: '10px',\n  },\n  description: {\n    fontSize: '16px',\n    color: '#666',\n    marginBottom: '20px',\n    textAlign: 'center',\n    maxWidth: '400px',\n  },\n  gameContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    gap: '20px',\n    alignItems: 'center',\n\n  },\n  boardWrapper: {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${COLS}, 50px)`,\n    gap: '5px',\n    border: '2px solid #333',\n    padding: '10px',\n    borderRadius: '8px',\n    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.3)',\n    backgroundColor: '#000000',\n  },\n  cell: {\n    width: '50px',\n    height: '50px',\n    borderRadius: '50%',\n    border: '1px solid black',\n  },\n  winner: {\n    fontSize: '18px',\n    fontWeight: 'bold',\n    color: '#d9534f',\n    marginTop: '20px',\n    marginBottom: '20px',\n\n  },\n\n  restartButton: {\n    marginTop: '20px',\n    padding: '10px 20px',\n    fontSize: '16px',\n    fontWeight: 'bold',\n    color: '#fff',\n    backgroundColor: '#007bff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer',\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}